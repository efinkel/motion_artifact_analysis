%%% To do:
%%% -Load example session's raw data
%%% -export and process median motion artifact signal
%%% -cut up signal into trials using previously processed intan/bcont data
%%% -plot motion artifact
%%% -see if calculating moving binned rms is a good idea (bin it at the
%%%     same specs as neural data
%%% -see if CP activity precedes rms
clear
example_dir = 'C:\Users\efink\Documents\DATA\NWB_hackathon_data\Data\EF0120\04-19-18_FT\';
BcontDir = ['C:\Users\efink\Documents\DATA\NWB_hackathon_data\Data', '\'];

% identify session date, direction
cd(example_dir)
[~, seshName, ~] = fileparts(pwd);
seshDate = seshName(1:end-3);
cd ../
[~, mouse_name, ~] = fileparts(pwd);
cd(example_dir)

% get motion artifact signal and perch. Filter them
[rawSignal, sampleRate, rawPerch] = preProcessMotion.get_motion_artifact(example_dir, 'perch', 1);
filteredSignal = preProcessMotion.filterSignal(rawSignal, sampleRate);
filteredPerch1 = Intan.PawFuncPerch.FiltMovement(rawPerch(1,:), sampleRate);
filteredPerch2 = Intan.PawFuncPerch.FiltMovement(rawPerch(2,:), sampleRate);

firstDerivPerch1 = gradient(filteredPerch1);
firstDerivPerch2 = gradient(filteredPerch2);

normedPerch1 = (firstDerivPerch1-min(firstDerivPerch1))/(max(firstDerivPerch1) - min (firstDerivPerch1));
normedPerch2 = (firstDerivPerch2-min(firstDerivPerch2))/(max(firstDerivPerch2) - min (firstDerivPerch2));

% load behavior and intan data that will be used to identify where 
% to chop up and how to sort filtered signal
rawSeshDate = seshDate([7,8,1,2,4,5]);
b1 = Solo.EFcross3_switchArray([BcontDir,'\data_@efcross3_switchobj_', mouse_name,'_', rawSeshDate, 'a'],...
                    [mouse_name, '_', rawSeshDate, 'a']);

load([mouse_name, '_', seshDate, '.mat'])
a.combineData(b1)

%chop up and sort filtered signal
xrange = [-1,2];
parsedSignal = preProcessMotion.parseSignalTrials(a, filteredSignal, sampleRate, xrange);
parsedPerch1 = preProcessMotion.parseSignalTrials(a, normedPerch1, sampleRate, xrange);
parsedPerch2 = preProcessMotion.parseSignalTrials(a, normedPerch2, sampleRate, xrange);
mouse_name_rep = repmat({mouse_name}, [size(parsedSignal,1), 1]);
date_rep = repmat({seshDate}, [size(parsedSignal,1), 1]);

%% if you want to save unsorted perch and motion artifact table
label = ['(', num2str(xrange(1)), ' - ', num2str(xrange(2)), ')'];
motion_signals = [{'mouse_name', 'date', 'Trial_num', ['artifact ', label] , ['artifact_rms', label], ['perch1', label], ['perch2', label]};...
    mouse_name_rep, date_rep, parsedSignal, parsedPerch1(:, 2), parsedPerch1(:, 2)];
save(['motion_signals','_', mouse_name, '_', seshDate], 'motion_signals')

%%
sortedTrials  = preProcessMotion.sortByTrialType(a);

sortedTrialNums = sortedTrials(:,2);
signalTrialNums = cell2mat(parsedSignal(:,1));

sortedSignal_inds = cellfun(@(x) find(ismember(signalTrialNums, x)), sortedTrialNums, 'uni', 0);
sortedSignal = cellfun(@(x)  parsedSignal(x,:), sortedSignal_inds, 'uni', 0);
sortedPerch = cellfun(@(x)  parsedPerch(x,:), sortedSignal_inds, 'uni', 0);



%%
%calculate rms of binned signal
bin_size = 0.01;
binnedRMS = preProcessMotion.motionRMS(sortedSignal, xrange, bin_size, sampleRate);

% range should be identical to range used in parsedSignalTrials
% function
set(0,'defaultAxesFontSize',18)
[~, preStimRMS_inds] = cellfun(@(x) sort(cell2mat(x(:,3))), sortedSignal, 'uni',0);

binnedRMS = cellfun(@(x,y) x(y,:), binnedRMS, preStimRMS_inds, 'uni',0);
sortedPerch = cellfun(@(x,y) x(y,:), sortedPerch, preStimRMS_inds, 'uni',0);

rts = preProcessMotion.get_reactionTimes(sortedTrials);
[rts, rt_inds] = cellfun(@(x) sort(x), rts, 'uni',0);

binnedRMS([1,7]) = cellfun(@(x,y) x(y,:), binnedRMS([1,7]), rt_inds([1,7]), 'uni',0);
sortedPerch([1,7]) = cellfun(@(x,y) x(y,:), sortedPerch([1,7]), rt_inds([1,7]), 'uni',0);


fig = plotBinnedRMS(binnedRMS, xrange, bin_size, sampleRate, [0,0.05], rts);
fig = plotBinnedPerch(sortedPerch, xrange, 1/30000, sampleRate, [0.35,0.65], rts);
fig = plotPreStimMove3(sortedSignal, xrange, sampleRate);

cd('C:\Users\PC\Documents\Current Data\motion_artifact_analysis\Figures\trial_exclusion_criteria')
savefig(fig, [mouse_name, '_', seshDate, '.fig'])
set(gcf,'PaperPositionMode','auto')
print(fig, [mouse_name, '_', seshDate],'-dtiffn','-r0')
close(fig)
        